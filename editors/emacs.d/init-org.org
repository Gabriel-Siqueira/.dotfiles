#+TITLE: Emacs configuration file
#+Author: Gabriel Henriques Siqueira

* Set up
** Auto tangle

The following function tangles and compiles this configurations, also define a key to call this function.

#+begin_src emacs-lisp :tangle yes
(defun my/tangle-init ()
   "Tangle code for this file"
	(interactive)
    (find-file (concat user-emacs-directory "init-org.org"))
    (org-babel-tangle)
    (load-file (concat user-emacs-directory "init-org.el"))
    (byte-compile-file (concat user-emacs-directory "init-org.el"))
)

(global-set-key "\C-cR" 'my/tangle-init)
#+end_src

** packages

Add package archives and initialize package

#+begin_src emacs-lisp :tangle yes
(require 'package)
(push '("melpa" . "http://melpa.milkbox.net/packages/") package-archives)
(push '("marmalade" . "http://marmalade-repo.org/packages/") package-archives)
(package-initialize)
#+end_src

Install use package to ensure that packages are installed when required
https://jwiegley.github.io/use-package/

#+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
    (require 'use-package)
	(require 'bind-key)
)
#+end_src

Hide and abbreviate modes from the mode line, place on the start to be used
with use-package.

#+begin_src emacs-lisp :tangle yes

(use-package diminish
	:ensure t
)

#+END_SRC

Other lisp files not in packages

#+begin_src emacs-lisp :tangle yes

(add-to-list 'load-path "~/.emacs.d/lisp/")

#+end_src

* Notes

- Manually put in the .emacs.d/lisp/ files:
  - evil-plugins (copy the ones you are going to use)
- To use spell-check download aspell dictionaries (use the system package manager).
- To use langtool download languagetool (use the system package manager) and verify the path in the configuration.

* General Configurations

Activate and configure features already available.

#+begin_src emacs-lisp :tangle yes

;; Start emacs server
(server-start)

;; start maximized
(toggle-frame-maximized)

;; engine to regexp
(require 're-builder)
(setq reb-re-syntax 'string)

;; no message on scratchpad
(setq initial-scratch-message nil)

;; yes is y and no is n
(fset 'yes-or-no-p 'y-or-n-p)

;; Isolate kill ring
(setq interprogram-cut-function nil)
(setq interprogram-paste-function nil)

#+end_src

** Dired

Enhance the dired functionality with dired-x.

#+begin_src emacs-lisp :tangle yes

  (add-hook 'dired-load-hook
	  (lambda ()
		  (load "dired-x")
			  ;; Set dired-x global variables here.
			  ))
  (add-hook 'dired-mode-hook
	  (lambda ()
		  ;; Set dired-x buffer-local variables here.
		  (dired-omit-mode 1)
		  ))

#+end_src

Use dired like ranger.
https://github.com/ralesi/ranger.el

#+begin_src emacs-lisp :tangle yes
(use-package ranger
	:ensure t
	:config
		(ranger-override-dired-mode t)
		(setq ranger-width-parents 0.01)
		(setq ranger-width-preview 0.5)
		(setq ranger-show-hidden nil)
		(define-key ranger-mode-map (kbd "'") (lambda () (interactive) (ranger-create-mark ?') (ranger-goto-mark)))
		(define-key ranger-mode-map (kbd "\C-rn") 'ranger-next-tab)
		(define-key ranger-mode-map (kbd "\C-rp") 'ranger-prev-tab)
		(define-key ranger-mode-map (kbd "\C-rc") 'ranger-new-tab)
		(define-key ranger-mode-map (kbd "\C-rr") 'ranger-refresh)
		(global-set-key "\C-cr" 'ranger)
)
#+end_src

** Ctags

In order to create tags file withing emacs.  
 
#+begin_src emacs-lisp :tangle yes

(setq path-to-ctags "/usr/bin/ctags")
(defun create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (shell-command
    (format "%s -f TAGS -e -R %s" path-to-ctags (directory-file-name dir-name)))
)

#+end_src

** Visual of the buffer

#+begin_src emacs-lisp :tangle yes

(setq-default tab-width 4)        ; Indentation 4 spaces
(setq c-basic-offset 4)
(show-paren-mode 1)               ; match parents, breckets, etc
(setq show-trailing-whitespace t) ; mark trailing-whitespaces
(setq-default fill-column 80)     ; line size
(global-visual-line-mode 1)       ; wrap long lines

#+end_src

** Persistence
*** auto save

Emacs saves the file been edited in an other file, this setting ensure that the
file is saved in the visited file instead.

#+BEGIN_SRC emacs-lisp :tangle yes 
(setq auto-save-visited-file-name t)
#+END_SRC

*** backup files

#+begin_src emacs-lisp :tangle yes

;; Directory to save beckup files
(setq backup-directory-alist `(("." . "~/Documents/swap_files")))
(setq version-control t    ; Use version numbers for backups
	delete-old-versions t  ; don't ask if can delet old versions
	kept-new-versions 8)   ; Number of newest versions to keep

#+end_src

*** Places

Save cursor position.

#+begin_src emacs-lisp :tangle yes

(require 'saveplace)
(setq-default save-place t)

#+end_src

*** desktop

Save current emacs when quit. <<desktop>>

#+begin_src emacs-lisp :tangle yes

(desktop-save-mode 1)

#+end_src

*** history

#+begin_src emacs-lisp :tangle yes

(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* UI settings

Some configuration on how emacs look like.

#+begin_src emacs-lisp :tangle yes

(blink-cursor-mode -1)          ; cursor does not blink
(tool-bar-mode -1)              ; no tool bar
(menu-bar-mode -1)              ; remove menu bar
(scroll-bar-mode -1)            ; remove scrool bar
(set 'inhibit-startup-screen t) ; no startup screen
(set 'global-prettify-symbols-mode t) ;pretty-symbols

(custom-set-faces
    `(default ((t (:family "Terminus" :foundry "xos4" :slant normal :weight normal :height 105 :width normal))))
)

#+end_src

** theme

Install and select theme.

#+begin_src emacs-lisp :tangle yes

(use-package solarized-theme
    :ensure t
	:custom
		(solarized-use-variable-pitch nil)
		(solarized-scale-org-headlines nil)
		(solarized-high-contrast-mode-line t)
    :config
	(load-theme 'solarized-dark t)
)

#+end_src

** mode-line

Choose one to load.

*** smart-mode-line

Smart-mode-line as mode-line.
[[https://github.com/Malabarba/smart-mode-line]]

 #+begin_src emacs-lisp :tangle yes

(use-package smart-mode-line
	:ensure t
	:custom
		(sml/no-confirm-load-theme t)
		(sml/theme 'dark)
		(sml/show-client t "indicate when using emacsclient")
		(sml/position-percentage-format nil "indicatior of buffer position")
	:config
		(sml/setup)
		(set-face-attribute 'mode-line nil
					:background "#444444"
                    :box 'nil)
		(set-face-background 'mode-line-inactive "#002b36")
		;; Abbreviate
		(add-to-list 'sml/replacer-regexp-list '("^~/MEGA/" ":MEG:") t)	
		(add-to-list 'sml/replacer-regexp-list '("^:MEG:unicamp/" ":uni:") t)	
)

 #+end_src

*** space-line

Spaceline as mode-line.
[[https://github.com/TheBB/spaceline]]

 #+begin_src emacs-lisp :tangle no

 (use-package spaceline
	 :ensure t
	 :config
		 (require 'spaceline-config)
		 (spaceline-spacemacs-theme)
 )

 #+end_src

* Org mode

Organization, todo, notes and much more.
https://orgmode.org/

** packages
*** ox

Different ways of export org files.

**** ox-html5slide
	 
#+begin_src emacs-lisp :tangle yes

(use-package ox-html5slide
	:ensure t
)

#+end_src

*** journal
	
#+begin_src emacs-lisp :tangle yes

(use-package org-journal
	:ensure t
	:config
		(setq org-journal-dir "~/Dropbox/org/journal")
)

#+end_src

** compatibility
   
Settings to make org compatible with odder modes.

#+begin_src emacs-lisp :tangle yes

(add-hook 'org-mode-hook (lambda () (setq-local yas/trigger-key [tab]) (define-key yas-keymap [tab] 'yas/next-field-or-maybe-expand)))

#+end_src

** agenda

Use agenda with ~C-c a~, set files for the agenda and other agenda configs.

#+begin_src emacs-lisp :tangle yes

(global-set-key "\C-coa" 'org-agenda)
(setq org-agenda-files (list "~/Dropbox/org/"))
(setq org-agenda-start-on-weekday 0) ; week starts on sunday
(setq org-agenda-compact-blocks t)
(setq org-agenda-custom-commands '(
	("x" "main view" (
		(tags "urgente|pin")
		(agenda "" ((org-agenda-span 1)))
		(todo "TODO|TODAY")
	))
))

#+end_src

Super agenda (agenda with itens organize by groups).

#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package org-super-agenda
	:ensure t
	:config 
		(setq org-super-agenda-groups '(
			(:name "Urgente" :tag "urgente" :deadline today :order 1
				:face (:background "red" :foreground "yellow"))
			(:name "Pin" :tag "pin" :order 2)
			(:name "Today" :todo "TODAY"
				:face (:background "black" :foreground "yellow") :order 3)
			(:name "Grid" :and (:time-grid t :not (:todo "TODO")) 
				:face (:foreground "RosyBrown1") :order 4)
			(:name "Today" :date today :scheduled past
				:face (:background "black" :foreground "yellow") :order 5)
			(:name "Todo" :todo "TODO" :order 6)
		))
	  (setq org-deadline-warning-days 0)
	:init (org-super-agenda-mode)
	:diminish
)

#+END_SRC

** template

Easy template expansions.

#+BEGIN_SRC emacs-lisp :tangle yes

(add-to-list 'org-structure-template-alist '("se" "#+BEGIN_SRC emacs-lisp :tangle yes \n?\n#+END_SRC"))

#+END_SRC

** other keys
   
#+begin_src emacs-lisp :tangle yes

(global-set-key "\C-col" 'org-store-link)
(global-set-key "\C-coc" 'org-capture)
(global-set-key "\C-cob" 'org-switchb)
(global-set-key "\C-coj" 'org-journal-new-entry)

#+end_src

** other settings
   
#+begin_src emacs-lisp :tangle yes

; fold all blocks in the start
(setq org-hide-block-startup t)
; lists treated as low level headlines
(setq org-cycle-include-plain-lists 'integrate)
; status of chackbos include the whole hieratchy
(setq org-checkbox-hierarchical-statistics nil)
; chage size of latex formula's font
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

#+end_src

* Evil mode

Vim implementation in emacs lisp, lets give emacs a good text editor.
https://github.com/emacs-evil/evil

#+begin_src emacs-lisp :tangle yes

(use-package evil
    :ensure t
	:custom
		(evil-want-Y-yank-to-eol t "Y acts like D for yank")
		(evil-shift-width 4 "Set >> and << size")
	:init
		;; first start evil leader, not working with after
		(use-package evil-leader
			:ensure t
			:config
				(global-evil-leader-mode)
				(evil-leader/set-leader "ç")
		)
    :config
		(evil-mode 1)
)

#+end_src

** Cursors for different states
  Each state have its on cursor.

#+begin_src emacs-lisp :tangle yes

(setq evil-emacs-state-cursor '("orange" box))
(setq evil-normal-state-cursor '("white" box))
(setq evil-visual-state-cursor '("yellow" box))
(setq evil-insert-state-cursor '("white" bar))
(setq evil-replace-state-cursor '("red" box))
(setq evil-operator-state-cursor '("white" hollow))

#+END_SRC

** undo

#+begin_src emacs-lisp :tangle yes

(global-undo-tree-mode)
(setq undo-tree-auto-save-history t)

#+end_src

** Plugins
*** evil-args

Arguments as text object.
https://github.com/wcsmith/evil-args

#+begin_src emacs-lisp :tangle yes

(use-package evil-args
	:ensure t
	:config
		(define-key evil-inner-text-objects-map "," 'evil-inner-arg)
		(define-key evil-outer-text-objects-map "," 'evil-outer-arg)
)

#+end_src

*** evil-commentary

Fast way to comment and uncomment code
https://github.com/linktohack/evil-commentary

#+begin_src emacs-lisp :tangle yes

(use-package evil-commentary
	:ensure t
	:config (evil-commentary-mode)
	:diminish
)

#+end_src

*** evil-magit

Evil keys for magit.
https://github.com/emacs-evil/evil-magit

#+begin_src emacs-lisp :tangle yes

(use-package evil-magit
	:ensure t
)

#+end_src

*** evil-matchit

Extends the use of %.
https://github.com/redguardtoo/evil-matchit

#+begin_src emacs-lisp :tangle no

(use-package evil-matchit
	:ensure t
	:config (global-evil-matchit-mode 1)
)

#+end_src

*** evil-numbers

Increase and decrease numbers.
https://github.com/cofi/evil-numbers

#+begin_src emacs-lisp :tangle yes

(use-package evil-numbers
	:ensure t
	:config
		(evil-leader/set-key "+" 'evil-numbers/inc-at-pt)
		(evil-leader/set-key "-" 'evil-numbers/dec-at-pt)
)

#+end_src

*** evil-org

Evil bindings for org-mode
https://github.com/Somelauw/evil-org-mode

#+begin_src emacs-lisp :tangle yes

(use-package evil-org
  :ensure t
  :after (evil org)
  :hook ((org-mode . evil-org-mode)
		 (evil-org-mode . (lambda () (evil-org-set-key-theme))))
  :config
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys)
  :diminish
)

#+end_src

*** evil-plugins

Plugins from evil-plugins.
https://github.com/tarao/evil-plugins

#+begin_src emacs-lisp :tangle yes

(require 'evil-textobj-between)
(require 'evil-ex-registers)
(define-key evil-ex-completion-map (kbd "C-r") #'evil-ex-paste-from-register)

#+end_src

*** evil-replace-with-register

Operation to replace with register content.
https://github.com/emacsmirror/evil-replace-with-register

#+begin_src emacs-lisp :tangle yes

(use-package evil-replace-with-register
	:ensure t
	:config
		(setq evil-replace-with-register-key (kbd "gr"))
		(evil-replace-with-register-install)
)

#+end_src
	
*** evil-snipe

Improve f and F motions
https://github.com/hlissner/evil-snipe

#+begin_src emacs-lisp :tangle yes

(use-package evil-snipe
	:ensure t
	:custom
		(evil-snipe-scope 'buffer "extend f to all the buffer")
		(evil-snipe-repeat-scope 'buffer  "extend n,N to all the buffer")
	:config
		(evil-snipe-override-mode 1)
)

#+end_src

*** evil-surround

Works like vim surround.
https://github.com/emacs-evil/evil-surround

#+begin_src emacs-lisp :tangle yes

(use-package evil-surround
	:ensure t
	:config (global-evil-surround-mode 1)
)

#+end_src

*** evil-visualstar

Extend # and * to visual selection.
https://github.com/bling/evil-visualstar

#+begin_src emacs-lisp :tangle yes

(use-package evil-visualstar
	:ensure t
	:config (global-evil-visualstar-mode)
)

#+end_src

*** not installed

Some interesting plugins that i am not currently using.

**** evil-extra-operator

A bunch of extra operators.
https://github.com/Dewdrops/evil-extra-operator

#+begin_src emacs-lisp :tangle no

(use-package evil-extra-operator
	:ensure t
	:config
		(define-key evil-motion-state-map "ge" 'evil-operator-eval)
		(define-key evil-motion-state-map "gt" 'evil-operator-google-translate)
		(define-key evil-motion-state-map "gG" 'evil-operator-google-search)
		(define-key evil-motion-state-map "gh" 'evil-operator-highlight)
		(define-key evil-motion-state-map "go" 'evil-operator-org-capture)
		(define-key evil-motion-state-map "gR" 'evil-operator-remember)
)

#+end_src

**** targets
	 
https://github.com/noctuid/targets.el

**** evil-smartparens	

Works with [[smartparens]] and improve its usage in evil-mode when in smartparens-strict-mode.
https://github.com/expez/evil-smartparens

#+begin_src emacs-lisp :tangle no

(use-package evil-smartparens
	:ensure t
	:hook (smartparens-enabled . evil-smartparens-mode)
	:after smartparens
	:config 
)

 #+end_src

** keys

Bindings specific to evil mode.

*** Spell
#+begin_src emacs-lisp :tangle yes

(evil-leader/set-key "ss" 'flyspell-mode) ;; init spell
(evil-leader/set-key "sp" 'flyspell-prog-mode) ;; init spell for programs
(evil-leader/set-key "sc" 'my/change-dictionary) ;; change dictionary

#+END_SRC

*** buffer

Switch buffer

#+begin_src emacs-lisp :tangle yes

(define-key evil-insert-state-map (kbd "C-b") 'switch-to-buffer)
(define-key evil-normal-state-map (kbd "C-b") 'switch-to-buffer)
(define-key evil-visual-state-map (kbd "C-b") 'switch-to-buffer)
(define-key evil-insert-state-map (kbd "C-SPC") 'mode-line-other-buffer)
(define-key evil-normal-state-map (kbd "C-SPC") 'mode-line-other-buffer)
(define-key evil-visual-state-map (kbd "C-SPC") 'mode-line-other-buffer)

#+end_src

*** Visual lines
	
Replace line moviments to use visual lines.

#+BEGIN_SRC emacs-lisp :tangle yes

(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

#+END_SRC

*** window

Move between windows, C-arrows or C-hjkl.
<<evil-window-key>>
[[window-key]]

#+begin_src emacs-lisp :tangle yes

(define-key evil-normal-state-map (kbd "C-j") 'windmove-down)
(define-key evil-normal-state-map (kbd "C-k") 'windmove-up)
(define-key evil-normal-state-map (kbd "C-h") 'windmove-left)
(define-key evil-normal-state-map (kbd "C-l") 'windmove-right)

#+end_src

*** Other

- [[langtool][langtool]]
- [[yasnippet][yasnippet]]

** Ex comands

New ex commands definitions.

#+begin_src emacs-lisp :tangle yes

(evil-ex-define-cmd "W" "w")
(evil-ex-define-cmd "Q" "q")
(evil-ex-define-cmd "WQ" "wq")
(evil-ex-define-cmd "Wq" "q")
(evil-ex-define-cmd "X" "x")
(evil-ex-define-cmd "ee" "e *dummy*")

#+END_SRC

* Languages and file types

Configurations for specific programing languages.

** haskell

https://github.com/haskell/haskell-mode

#+begin_src emacs-lisp :tangle yes

(use-package haskell-mode
	:ensure t
	:interpreter ("haskell" . haskell-mode)
)

#+end_src

** python

Auto competition using [[company]]
https://github.com/syohex/emacs-company-jedi

#+begin_src emacs-lisp :tangle yes

(use-package company-jedi
	:ensure t
	:after company
	:config
		(add-to-list 'company-backends 'company-jedi)
)

#+end_src

Ipython as python shell

#+begin_src emacs-lisp :tangle yes

(setq python-shell-interpreter "~/bin/anaconda3/bin/ipython"
	python-shell-interpreter-args "--simple-prompt -i")
		
#+end_src

** scala
   
http://ensime.github.io/editors/emacs/scala-mode/

#+begin_src emacs-lisp :tangle yes

(use-package scala-mode
	:ensure t
	:interpreter ("scala" . scala-mode)
)

#+end_src

* Other Packages
** company

Auto complete.
http://company-mode.github.io/
<<company>>

#+begin_src emacs-lisp :tangle yes

(use-package company
	:ensure t
	:config
		(global-company-mode)
		(define-key company-active-map (kbd "C-n") (lambda () (interactive) (company-complete-common-or-cycle  1)))
		(define-key company-active-map (kbd "C-p") (lambda () (interactive) (company-complete-common-or-cycle -1)))
	:diminish
)

#+end_src

** dash

A list api used in origami.
https://github.com/magnars/dash.el

#+begin_src emacs-lisp :tangle yes

(use-package dash
	:ensure t
)

#+end_src

** eyebrowse

Like tabs for emacs.
https://github.com/wasamasa/eyebrowse

#+begin_src emacs-lisp :tangle yes

(use-package eyebrowse
	:ensure t
    :custom (eyebrowse-new-workspace t "in new workspace open on scratchpad")
	:config
		(global-set-key (kbd "M-0") 'eyebrowse-switch-to-window-config-0)
		(global-set-key (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
		(global-set-key (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
		(global-set-key (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
		(global-set-key (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
		(global-set-key (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
		(global-set-key (kbd "M-6") 'eyebrowse-switch-to-window-config-6)
		(global-set-key (kbd "M-7") 'eyebrowse-switch-to-window-config-7)
		(global-set-key (kbd "M-8") 'eyebrowse-switch-to-window-config-8)
		(global-set-key (kbd "M-9") 'eyebrowse-switch-to-window-config-9)
		(eyebrowse-mode t)
	:diminish
)

#+end_src

** fill-column-indicator

Show a column to limit file length.
https://www.emacswiki.org/emacs/FillColumnIndicator

#+begin_src emacs-lisp :tangle yes

(use-package fill-column-indicator
	:ensure t
	:config
		(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
		(global-fci-mode 1)
)

#+end_src

** flycheck

Syntax checker to multiple languages.
http://www.flycheck.org/en/latest/

#+begin_src emacs-lisp :tangle yes

(use-package flycheck
	:ensure t
	:config
		(global-flycheck-mode)
	:diminish
)

#+end_src

** helm

Emacs incremental completion and selection narrowing framework.
https://github.com/emacs-helm/helm

#+begin_src emacs-lisp :tangle yes

(use-package helm
	:ensure t
	:custom 
		(helm-mode-fuzzy-match t)
		(helm-completion-in-region-fuzzy-match t)
		(helm-candidate-number-limit 100)
	:config
		(helm-mode 1)
	:diminish
)

#+end_src

** helm-bibtex
   
Use [[helm]] to consult bibtex references.
https://github.com/tmalsburg/helm-bibtex

#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package helm-bibtex
	:ensure t
	:custom 
		(bibtex-completion-bibliography '("~/MEGA/references/ref.bib") "file of bibtex entries")
		(bibtex-completion-library-path '("~/MEGA/references/pdfs/") "path to pdfs")
		(bibtex-completion-notes-path "~/MEGA/references/ref.org" "file of notes")
		(bibtex-completion-additional-search-fields '(tags) "use tags when searching")
	:diminish
)
#+END_SRC

** origami

Fold blocks of code.
https://github.com/gregsexton/origami.el

#+begin_src emacs-lisp :tangle yes

(use-package origami
	:ensure t
	:after dash s
	:custom (origami-show-fold-header t "show header, stop with some visual problems")
	:config
		(global-origami-mode)
)

#+end_src

** langtool

For grammar checking.
<<langtool>>
https://github.com/mhayashi1120/Emacs-langtool

#+begin_src emacs-lisp :tangle yes

(use-package langtool
	:ensure t
	:custom (langtool-java-classpath
			"/usr/share/languagetool:/usr/share/java/languagetool/*")
			(langtool-disabled-rules '(
				"REPEATED_WORDS"
			) "disable specific rules")
	:init
		(evil-leader/set-key "sg" 'langtool-check)
		(evil-leader/set-key "sG" 'langtool-check-done)
)

#+end_src

** magit

Interface with git.
https://magit.vc/

#+begin_src emacs-lisp :tangle yes

(use-package magit
	:ensure t
	:config
		(global-set-key "\C-xg" 'magit-status)
	:diminish
)

#+end_src

** multi-term

Handle better multiple terminals.
https://www.emacswiki.org/emacs/MultiTerm
<<multi-term>>

#+begin_src emacs-lisp :tangle yes

(use-package multi-term
	:ensure t
	:custom
		(multi-term-program "/bin/zsh")
		(multi-term-dedicated-select-after-open-p t "focus when opening dedicate")
	:config
		(defun multi-term-ipython ()
			"Make a multi-term buffer running ipyrhon."
			(interactive)
			(let ((multi-term-program "/home/gabriel/bin/anaconda3/bin/ipython"))
			(multi-term)))
		(defadvice term-send-raw (around rename-term-name activate)
			(progn (rename-buffer (concat "term: " 
				(shell-command-to-string "pwd | xargs basename |  tr -d '\n'") 
			))) ad-do-it)
		(global-set-key "\C-cto" 'multi-term)
		(global-set-key "\C-ctn" 'multi-term-next)
		(global-set-key "\C-ctp" 'multi-term-prev)
		(global-set-key "\C-ctt" 'multi-term-dedicated-toggle)
		(global-set-key "\C-cti" 'multi-term-ipython)
		(global-set-key "\C-ctl" 'term-line-mode)
		(global-set-key "\C-ctc" 'term-char-mode)
	:diminish
)

#+end_src

** openwith

Select how to open files.
https://www.emacswiki.org/emacs/OpenWith

#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package openwith
	:ensure t
	:custom 
	(openwith-associations '(
		("\\.pdf\\'" "xdg-open" (file))
	) "select how to open each file")
	:init
	(openwith-mode t)
	:diminish
)
#+END_SRC

** projectile

Manage projects.
https://github.com/bbatsov/projectile

#+begin_src emacs-lisp :tangle yes

(use-package projectile
	:ensure t
	:config (projectile-mode)
	:diminish
)

#+end_src

Integration with helm.
https://github.com/bbatsov/helm-projectile

#+begin_src emacs-lisp :tangle yes

(use-package helm-projectile
	:ensure t
	:after helm
	:config (helm-projectile-on)
)

#+end_src

** s

A string manipulation library used in origami.
https://github.com/magnars/s.el

#+begin_src emacs-lisp :tangle yes

(use-package s
	:ensure t
)

#+end_src

** smart-tab

Tabs for indentation, spaces for alignment.
https://www.emacswiki.org/emacs/SmartTabs

#+begin_src emacs-lisp :tangle yes

(use-package smart-tab
	:ensure t
	:config (global-smart-tab-mode 1)
	:diminish
)

#+end_src

** smartparens

Automatically close parens in a smart way.
https://github.com/Fuco1/smartparens

#+begin_src emacs-lisp :tangle yes

(use-package smartparens
	:ensure t
	:hook (prog-mode . smartparens-mode)
	:config
		(require 'smartparens-config)
	:diminish
)

#+end_src

** smex

Better M-x.
https://github.com/nonsequitur/smex

#+begin_src emacs-lisp :tangle yes

(use-package smex
	:ensure t
	:config
		(global-set-key "\M-x" 'smex)
		(global-set-key "\M-X" 'smex-major-mode-commands)
		(smex-initialize)
	:diminish
)

#+end_src

** which-key

Show passibly key bindgs while typing.
https://github.com/justbur/emacs-which-key

#+begin_src emacs-lisp :tangle yes

(use-package which-key
	:ensure t
	:init (which-key-mode)
	:diminish
)

#+end_src

** yasnippet

A snippet package for Emacs.
https://github.com/joaotavora/yasnippet
<<yasnippet>>

#+begin_src emacs-lisp :tangle yes

(use-package yasnippet
	:ensure t
	:custom (yas-snippet-dirs '(
		"~/.emacs.d/mysnippets"
		) "directories where to search for snippets")
		(yas/indent-line nil "do not auto-indent")
	:config
		(yas-global-mode 1)
		;; keys expacion
		(define-key yas-minor-mode-map (kbd "<tab>") nil)
		(define-key yas-minor-mode-map (kbd "TAB") nil)
		(define-key yas-minor-mode-map (kbd "C-y") yas-maybe-expand)
		(define-key evil-insert-state-map (kbd "C-y") yas-maybe-expand)
		;; keys navegation
		(define-key yas-keymap [tab]         nil)
		(define-key yas-keymap (kbd "TAB")   nil)
		(define-key yas-keymap [(shift tab)] nil)
		(define-key yas-keymap [backtab]     nil)
		(define-key yas-keymap (kbd "C-y") 'yas-next-field-or-maybe-expand)
		(define-key yas-keymap (kbd "C-S-y") 'yas-prev-field)
		(yas-reload-all)
	:diminish yas-minor-mode
)

#+end_src

A package with a bunch of snippets for yasnippet (not using currently).

#+begin_src emacs-lisp :tangle no

(use-package yasnippet-snippets
	:ensure t
)

#+end_src

** not installed

Some interesting plugins that i am not currently using.

*** perspective

Functionality similar to workspaces, the way i manage "sessions".
https://github.com/nex3/perspective-el
similar package: https://github.com/Bad-ptr/persp-mode.el

#+begin_src emacs-lisp :tangle no

(use-package perspective
	:ensure t
	:config
		(persp-mode)
	:diminish
)

#+end_src

*** pdf-tools

 Better pdf reader.
 https://github.com/politza/pdf-tools

 #+begin_src emacs-lisp :tangle no

 (use-package pdf-tools
	 :ensure t
	 :custom (pdf-view-resize-factor 1.1 "amount of zoom")
	 :config
		 (pdf-tools-install)
 )

 #+end_src

*** latex-preview-pane

 Preview as pdf when editing latex.

 #+begin_src emacs-lisp :tangle no

 (use-package latex-preview-pane
	 :ensure t
	 :config (latex-preview-pane-enable)
 )

 #+end_src

* Other Keys
** zoom

#+begin_src emacs-lisp :tangle yes

(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

#+end_src

** window

Move between windows, C-arrows or C-hjkl.
<<window-key>>
[[evil-window-key]]

#+begin_src emacs-lisp :tangle yes

(windmove-default-keybindings 'control)
(global-set-key [(control j)]  'windmove-down)
(global-set-key [(control k)]  'windmove-up)
(global-set-key [(control h)]  'windmove-left)
(global-set-key [(control l)]  'windmove-right)

#+end_src

** ESC

Escape exits things.

#+begin_src emacs-lisp :tangle yes

(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

#+end_src

** buffer

Switch buffer

#+begin_src emacs-lisp :tangle yes

(global-set-key (kbd "C-b") 'switch-to-buffer)
(global-set-key (kbd "C-SPC") 'mode-line-other-buffer)

#+end_src

* Functions
** Change dictionary
Easier way of change dictionary and enable flyspell.

#+begin_src emacs-lisp :tangle yes

(defun my/change-dictionary ()
	" change dictionary."
	(interactive)
	(print
		(cond
		((string= ispell-dictionary "en_US") (setq ispell-dictionary "pt_BR"))
		;; ((string= ispell-dictionary "pt_BR") (setq ispell-dictionary "de_DE"))
		(t (setq ispell-dictionary "en_US"))
)))

#+end_src

* End Conf

Specific configurations to be run in the end.

#+begin_src emacs-lisp :tangle yes

(diminish 'undo-tree-mode)
(diminish 'visual-line-mode)

#+END_SRC

* Local file

Read local file if exists.

#+begin_src emacs-lisp :tangle yes

(when (file-exists-p (concat user-emacs-directory "local.el"))
	(load-file (concat user-emacs-directory "local.el")))

#+END_SRC
