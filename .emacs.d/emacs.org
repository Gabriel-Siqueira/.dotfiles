#+TITLE: Emacs configuration file

* About this file
  This file have all my code to configure emacs, in order to load I 
use the babel package.
  My emacs.d/init.el:
	
#+begin_src emacs-lisp :tangle no
(org-babel-load-file "~/.emacs.d/emacs.org")
#+END_SRC

* Personal information
My personal data

#+begin_src emacs-lisp :tangle yes
  (setq user-full-name "Gabriel Siqueira"
        user-mail-address "gabriel.gabrielhs@gmail.com"
        calendar-latitude -22.9
        calendar-longitude -47.1
        calendar-location-name "Campinas, Sao Paulo, Brasil")
#+END_SRC

* Packages general configuration
Some general settings related to packages

** Packages repositories

#+begin_src emacs-lisp :tangle yes

(require 'package)
(push '("melpa-stable" . "http://stable.melpa.org/packages/")
			package-archives)
(push '("marmalade" . "http://marmalade-repo.org/packages/")
			package-archives )
(push '("melpa" . "http://melpa.milkbox.net/packages/")
			package-archives)
(push '("org" . "http://orgmode.org/elpa/")
			package-archives)
(push '("gnu" . "http://elpa.gnu.org/packages/")
			package-archives)
(package-initialize)


#+END_SRC

** use-package

#+begin_src emacs-lisp :tangle yes

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                ;; if you use :diminish
  (require 'bind-key) 

#+END_SRC

** Pallet
		For manager packages

#+begin_src emacs-lisp :tangle no

  (use-package pallet
     :ensure t
     :init
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
     :config
     (pallet-mode t)
	)

#+END_SRC
		
** Install/update all packages I use

#+begin_src emacs-lisp :tangle yes

  ;; update packages
  (when (not package-archive-contents) (package-refresh-contents))

  (defun require-package (package)
    (setq-default highlight-tabs t)
    "Install given PACKAGE."
    (unless (package-installed-p package)
      (unless (assoc package package-archive-contents)
        (package-refresh-contents))
      (package-install package)))

  (defun install-all () (interactive)
         (or
          (require-package 'ace-jump-mode)
          (require-package 'auto-complete)
          (require-package 'cider)
          (require-package 'clojure-mode)
          (require-package 'ediprolog)
          (require-package 'evil)
          (require-package 'evil-leader)
          (require-package 'evil-nerd-commenter)
          (require-package 'evil-numbers)
          ;; (require-package 'evil-smartparens)
          (require-package 'evil-surround)
          (require-package 'evil-tabs)
          (require-package 'fill-column-indicator)
          (require-package 'flymake)
          (require-package 'flymake-cursor)
          (require-package 'ghc)
          (require-package 'folding)
          (require-package 'haskell-mode)
          (require-package 'helm)
          (require-package 'indent-guide)
          (require-package 'linum-relative)
          (require-package 'lua-mode)
          (require-package 'multiple-cursors)
          (require-package 'multi-term)
          (require-package 'neotree)
          (require-package 'org-bullets)
          ;; (require-package 'pallet)
          ;; (require-package 'paxedit)
          (require-package 'php-mode)
          (require-package 'prolog)
          (require-package 'rainbow-delimiters)
          (require-package 'smart-mode-line)
          ;; (require-package 'smartparens)
          (require-package 'smex)
					(require-package 'use-package)
          (require-package 'yasnippet)
          ))

#+END_SRC
	
* UI settings
 Some configuration on how emacs look like.

#+begin_src emacs-lisp :tangle yes

    ;; full screen
    (set-frame-parameter nil 'fullscreen 'fullboth)

    (blink-cursor-mode -1)          ; cursor does not blink
    (tool-bar-mode -1)              ; no tool bar
    (set 'menu-bar-mode nil)        ; remove menu bar
    (display-time-mode t)           ; display time
    (set 'inhibit-startup-screen t) ; no startup screen

    (custom-set-faces
     `(default ((t (:family "Terminus" :foundry "xos4" :slant normal :weight bold :height 105 :width normal))))
     `(buffer-menu-buffer ((t (:weight bold)))))

#+END_SRC

** Theme

#+begin_src emacs-lisp :tangle yes

  ;; how ANSI escape sequences will be translate into faces
  (set 'ansi-color-faces-vector 
  [default default default italic underline success warning error])

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

  ;; Theme
  (if (file-exists-p "~/.emacs.d/themes/misterioso-blue-theme.el") 
		(load-theme 'misterioso-blue) 
		(load-theme 'misterioso))

#+END_SRC

** Mode lines

*** Powerline
Powerline as mode-line, not installed with package.

#+begin_src emacs-lisp :tangle no

  (add-to-list 'load-path "~/.emacs.d/el_files/powerline")
  (require 'powerline)
  (powerline-default-theme
  (display-time-mode t)

#+END_SRC

*** Smart-mode-line
Smart-mode-line as mode-line.

#+begin_src emacs-lisp :tangle no

  (use-package smart-mode-line
     :ensure t
     :config (sml/setup))

#+END_SRC

*** Spaceline
Spaceline os mode-line

#+begin_src emacs-lisp :tangle yes 

  (if (file-exists-p "~/.emacs.d/el_files/powerline") 
  (and (add-to-list 'load-path "~/.emacs.d/el_files/powerline")
  (use-package spaceline
     :ensure t
     :config 
      (require 'powerline)
      (require 'spaceline-config)
      (spaceline-helm-mode)
      (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
      (setq spaceline-evil-state-faces 
            '((normal . powerline-evil-normal-face) 
            (insert . powerline-evil-insert-face) 
            (emacs . powerline-evil-emacs-face) 
            (replace . spaceline-evil-visual)
            (visual . powerline-evil-visual-face) 
            (motion . powerline-evil-motion-face)))
			(set-face-background 'mode-line "black")
			(set-face-background 'powerline-active1 "#660066")
			(setq powerline-height 18)
      (setq powerline-default-separator 'contour)
			(setq spaceline-workspace-numbers-unicode t)
      (spaceline-spacemacs-theme))
  ) nil )

#+END_SRC

*** Additions
**** Anzu
		Just show number of matches on search.
		
		#+begin_src emacs-lisp :tangle yes

			(use-package anzu 
				 :ensure t
				 :diminish anzu-mode
				 :init (global-anzu-mode +1))

		#+END_SRC

** Nice characters
	Same changes to use nicer symbols

#+begin_src emacs-lisp :tangle yes

(use-package pretty-mode
   :ensure t
   :config (global-pretty-mode t))

#+END_SRC
	
* General Configurations

#+begin_src emacs-lisp :tangle yes

  ;; Indentation 2 spaces
  (setq-default evil-shift-width 2)
  (setq-default tab-width 2)
  (setq c-basic-offset 2)

  (menu-bar-mode 0)             ; remove menu bar ok
  (show-paren-mode 1)           ; match parents, breckets, etc
  (setq-default fill-column 77) ; line size
  (setq visible-bell 1)         ; no beep

  ;; yes is y and no is n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Isolate kill ring
  (setq interprogram-cut-function nil)
  (setq interprogram-paste-function nil)

  ;; Directory to save beckup files
  (setq backup-directory-alist `(("." . "~/Documents/swap_files")))
  (setq version-control t    ; Use version numbers for backups.
        kept-new-versions 8  ; Number of newest versions to keep.
        kept-old-versions 2) ; Number of oldest versions to keep.
    
  ;; different color for terminal emacs
  (if (window-system) nil (load-theme 'tango-dark) )
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))

#+END_SRC
	
** Settings on history

#+begin_src emacs-lisp :tangle yes

(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* Modes specific configs
	Modes that demand a lot of configuration and/or have many minor-modes 
related with them. 

** Evil mode
	 Simulate the behavior of vim modes and shortcuts.
	 
#+begin_src emacs-lisp :tangle yes

  (use-package evil 
   :ensure t
    :config (evil-mode 1))

  ;; require for evil folding
  (add-hook 'prog-mode-hook 'hs-minor-mode)

#+END_SRC

*** Cursors for different states
  Each state have its on cursor.

#+begin_src emacs-lisp :tangle yes

  (setq evil-emacs-state-cursor '("orange" box))
  (setq evil-normal-state-cursor '("red" box))
  (setq evil-visual-state-cursor '("yellow" box))
  (setq evil-insert-state-cursor '("green" bar))
  (setq evil-replace-state-cursor '("grey" box))
  (setq evil-operator-state-cursor '("red" hollow))

#+END_SRC
	
*** Evil-tabs
  Tabs like vim.
	I use [[eyebrowse]] instead.

#+begin_src emacs-lisp :tangle no

  (use-package evil-tabs 
     :ensure t
     :config (global-evil-tabs-mode t))

#+END_SRC

*** Evil-numbers
	Increase and decrease numbers.
	[[Evil-numbers key]]

#+begin_src emacs-lisp :tangle yes

  (use-package evil-numbers
     :ensure t
	)

#+END_SRC

*** Evil-surround
	Works like vim surround.
	<<Evil-surround>>
#+begin_src emacs-lisp :tangle yes

  (use-package evil-surround
     :ensure t
     :config (global-evil-surround-mode 1))

#+END_SRC

*** Evil-smartparens	
	Works with [[smartparens]] and improve its usage in evil-mode.
	

#+begin_src emacs-lisp :tangle no

  (use-package evil-smartparens 
     :ensure t
     :config (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))

#+END_SRC
	
*** nerd-commenter
	Fast way for comment and uncomment code

#+begin_src emacs-lisp :tangle yes

  (use-package evil-nerd-commenter 
     :ensure t
     :config (evilnc-default-hotkeys))

#+END_SRC

*** Other modes compatibility
		Make some configurations to make evil works better with other modes.

#+begin_src emacs-lisp :tangle yes

(use-package evil 
    :config
			(add-hook 'neotree-mode-hook
								 (lambda ()
									 (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
									 (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
									 (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
									 (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
)

#+END_SRC

** Org mode
	 A mode that does a lot of things.
	
	 [[Go to key]]
#+begin_src emacs-lisp :tangle yes

  (use-package org
     :ensure t)

	;; hooks for minor modes
	(add-hook 'org-mode-hook 'flyspell-mode)
	(add-hook 'org-mode-hook 'auto-complete-mode)

	;; Source code block
	(setq org-src-fontify-natively t)
	(setq org-src-tab-acts-natively t)

#+END_SRC

*** Visual
	Make org mode looks prettier.
#+begin_src emacs-lisp :tangle yes

  ;; Replace ... with ⤵
  (setq org-ellipsis "⤵")

  ;; Replace * for bullets
  (use-package org-bullets
     :ensure t
     :config
				(add-hook 'org-mode-hook
									(lambda ()
										(org-bullets-mode t)))
				(setq org-hide-leading-stars t))

#+END_SRC

*** Latex
	Settings related with Embedded LaTeX. 

	[[Org latex key]]

#+begin_src emacs-lisp :tangle yes

  ;; Size of mathematical images
  (setq org-format-latex-options 
  (plist-put org-format-latex-options :scale 1.5))

#+END_SRC

* Packages
** Languages
	Packages related with specific languages.

*** Clojure

#+begin_src emacs-lisp :tangle yes

  (use-package clojure-mode
     :ensure t)

#+END_SRC

*** Haskell

#+begin_src emacs-lisp :tangle yes

  (use-package haskell-mode
     :ensure t
     :config
				(add-hook 'haskell-mode-hook
									(lambda ()
										(haskell-doc-mode)
										(turn-on-haskell-indent)
										(ghc-init))))


#+END_SRC

*** Lua

#+begin_src emacs-lisp :tangle yes

  (use-package lua-mode
     :ensure t)

#+END_SRC

*** Php

#+begin_src emacs-lisp :tangle yes

  (use-package php-mode
     :ensure t)

#+END_SRC

*** Prolog
[[Evaluation key]]
#+begin_src emacs-lisp :tangle yes

  (use-package prolog
     :ensure t
     :config
				;; Mode for prolog
				(setq prolog-system 'swi)
				(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
																			("\\.m$" . mercury-mode))
																		 auto-mode-alist)))

  ;; ediprolog
  (use-package ediprolog
     :ensure t)

  ;; flymake for prolog
  (add-hook 'prolog-mode-hook
          (lambda ()
            (require 'flymake)
            (make-local-variable 'flymake-allowed-file-name-masks)
            (make-local-variable 'flymake-err-line-patterns)
            (setq flymake-err-line-patterns
                  '(("ERROR: (?\\(.*?\\):\\([0-9]+\\)" 1 2)
                    ("Warning: (\\(.*\\):\\([0-9]+\\)" 1 2)))
            (setq flymake-allowed-file-name-masks
                  '(("\\.pl\\'" flymake-prolog-init)))
            (flymake-mode 1)))

  (defun flymake-prolog-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list "swipl" (list "-q" "-t" "halt" "-s " local-file))))

#+END_SRC

** Completion
	Packages related with auto completion.

*** Auto-complete

#+begin_src emacs-lisp :tangle yes

  (use-package auto-complete
     :ensure t
     :config
				(require 'auto-complete-config)
				(ac-config-default)
				(ac-flyspell-workaround)
				(setq ac-disable-faces nil)
				(global-auto-complete-mode t))

#+END_SRC

*** Ac-ispell
	Ispell/aspell completion source for auto-complete.
		
#+begin_src emacs-lisp :tangle yes

  (use-package ac-ispell
     :ensure t
     :config
      (ac-ispell-setup)
			(add-hook 'flyspell-hook 'ac-ispell-ac-setup))

#+END_SRC

*** Semantic-mode
	Combine semantic-mode with auto-complete.
	 
#+begin_src emacs-lisp :tangle yes

  (require 'auto-complete)
  (semantic-mode 1)
  (defun my:add-semantic-to-autocomplete()
    (add-to-list 'ac-sources 'ac-source-semantic)
  )
  (add-hook 'prog-mode-hook 'my:add-semantic-to-autocomplete)

#+END_SRC

*** Yasnippet
  A template system for Emacs.

#+begin_src emacs-lisp :tangle yes

  (use-package yasnippet 
     :ensure t
     :config
				(setq yas-snippet-dirs '("~/.emacs.d/mysnippets"))
				(yas-reload-all)
				(add-hook 'prog-mode-hook 'yas-minor-mode)
				(add-hook 'ess-mode-hook 'yas-minor-mode)
				(add-hook 'markdown-mode-hook 'yas-minor-mode)
				(add-hook 'org-mode-hook 'yas-minor-mode))

#+END_SRC
*** Hippie-expand
	Complete paths for files.

	[[Hippie-expand key]]

#+begin_src emacs-lisp :tangle yes

  (fset 'my-complete-file-name
          (make-hippie-expand-function '(try-complete-file-name-partially
                                         try-complete-file-name)))

#+END_SRC

** Parents and delimiters
	Packages related with parents and delimiters.

*** Electric-pair-mode
		Auto write pairs.
		
#+begin_src emacs-lisp :tangle yes
(setq electric-pair-mode t)
#+END_SRC
		
*** Rainbow-delimiters
	Color for delimiters

#+begin_src emacs-lisp :tangle yes

  (use-package rainbow-delimiters
     :ensure t
     :config
				(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
				(add-hook 'org-mode-hook #'rainbow-delimiters-mode))

#+END_SRC

*** Paxedit
	Edit delimiters

	[[Paxedit key]]

#+begin_src emacs-lisp :tangle no

  (use-package paxedit
     :ensure t
     :config (add-hook 'clojure-mode-hook 'paxedit-mode))

#+END_SRC
	
*** smartparens
		Try to keep parens balance (smart).
    <<smartparens>>

#+begin_src emacs-lisp :tangle no

  (use-package smartparens-config
     :ensure t
     :config
				(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
				(add-hook 'prog-mode-hook #'smartparens-mode))

#+END_SRC

*** [[Evil-surround]]
** Terminal
	I use multi-term as terminal emulator 
	[[Terminal key]]
	
#+begin_src emacs-lisp :tangle yes

    (use-package multi-term
       :ensure t
       :config 
					(setq multi-term-program "/bin/zsh"))

#+END_SRC

** Helm/Smex/etc
*** Helm
	Emacs incremental completion and selection narrowing framework.

	[[Minibuffers key]]
#+begin_src emacs-lisp :tangle yes

  (use-package helm
     :ensure t
     :config (helm-mode 1))

#+END_SRC

*** Smex
	Smex is a better way of use commands on minibuffer.
	[[Minibuffers key]]

#+begin_src emacs-lisp :tangle yes

  (use-package smex 
     :ensure t
		 :config
				(smex-initialize))

#+END_SRC

** Manager buffers/windows/etc
*** Eyebrowse
	Manage windows configurations.
	<<eyebrowse>>

#+begin_src emacs-lisp :tangle yes

		(use-package eyebrowse
			 :ensure t
			 :init (eyebrowse-mode t)
			 :config (eyebrowse-setup-opinionated-keys)
		)

#+END_SRC

*** Neotree
  Show tree of directories/files

	[[Neotree key]]

#+begin_src emacs-lisp :tangle yes

  (use-package neotree 
     :ensure t)

#+END_SRC

*** Winer-mode
Winner Mode is a global minor mode. When activated, it allows you to “undo”
(and “redo”) changes in the window configuraton with the key commands 
‘C-c left’ and ‘C-c right’.

#+begin_src emacs-lisp :tangle yes

  (when (fboundp 'winner-mode)
      (winner-mode 1))

#+END_SRC

** Other packages
	All the other types of packages.

*** Ace-jump
	Easy way to move (like vim easy move).

	[[Go to key]]

#+begin_src emacs-lisp :tangle yes

  (use-package ace-jump-mode
     :ensure t)

#+END_SRC

*** Fill column
	Colorful column on the width limit.
	
#+begin_src emacs-lisp :tangle yes

  (use-package fill-column-indicator
     :ensure t
		 :config
				(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
				(global-fci-mode 1))

#+END_SRC
	
*** Flycheck
	Check syntax. 

  [[Flycheck key]]
	<<Flycheck>>	

#+begin_src emacs-lisp :tangle yes

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config
			(set-face-attribute
				'flycheck-error nil :foreground "red" :underline "red")
			(set-face-attribute
				'flycheck-warning nil :foreground "yellow" :underline "yellow")
			(set-face-attribute
				'flycheck-info nil :foreground "blue" :underline "blue")
  )
#+END_SRC
	
*** Flymake
		
	Check syntax, for work with c add the follow line to your Makefile: 
	I am using [[Flycheck]] instead.

#+begin_src :tangle no

.PHONY: check-syntax

check-syntax:
        $(CC) model.cpp -Wall -Wextra -pedantic -fsyntax-only $(SRCS

#+END_SRC

#+begin_src emacs-lisp :tangle no 

  (use-package flymake
     :ensure t
		 :config
				(add-hook 'find-file-hook 'flymake-find-file-hook)
				(eval-after-load 'flymake '(require 'flymake-cursor)))

#+END_SRC
	
*** Folding-mode
	Create folds in the code.

	[[Folding-mode key]]
	
#+begin_src emacs-lisp :tangle yes

  (use-package folding
     :ensure t
		 :config
				(load "folding" 'nomessage 'noerror)
				(folding-mode-add-find-file-hook)

				;; new marks
				(folding-add-to-marks-list 'emacs-lisp-mode ";;{{{" ";;}}}" nil t)
				(folding-add-to-marks-list 'lua-mode "-- {{{" "-- }}}" nil t)
				(folding-add-to-marks-list 'haskell-mode "--{{{" "--}}}" nil t)

				(add-hook 'prog-mode-hook (lambda() (folding-mode)))
				(let* ((ptr (assq 'asm-mode folding-mode-marks-alist)))
										 (setcdr ptr (list "@*" "@-")))
		)

#+END_SRC

*** Hl-line-mode
		Different background on the current line.
#+begin_src emacs-lisp :tangle yes

  (use-package hl-line
     :ensure t
		 :config
				(global-hl-line-mode)
				(set-face-background hl-line-face "black"))

#+END_SRC

*** Indent-guide
	Marks the current indentation.

#+begin_src emacs-lisp :tangle yes

  (use-package indent-guide
     :ensure t
		 :diminish indent-guide-mode 
		 :config
				(indent-guide-global-mode))

#+END_SRC

*** Mu4e
		Email client.

In order to work these configurations are necessary:

1. Install offlineimap and mu

2. Create ~/.offlineimaprc:

	#+begin_src :tangle no

	[general]
	ui = ttyui
	accounts = Gmail
	pythonfile = ~/Path/to/offlineimap.py

	[Account Gmail]
	localrepository = Gmail-Local
	remoterepository = Gmail-Remote

	[Repository Gmail-Local]
	type = Maildir
	localfolders = ~/Path/to/Maildir

	[Repository Gmail-Remote]
	type = Gmail
	remoteuser = gabriel.gabrielhs@gmail.com
	remotepasseval = get_password_emacs()
	realdelete = no
	maxconnections = 3
	folderfilter = lambda foldername: foldername not in ['[Gmail]/Spam', '[Gmail]/All Mail', '[Gmail]/Starred', '[Gmail]/Important']
	sslcacertfile = /etc/ssl/certs/ca-certificates.crt

	#+END_SRC

3. Create .offlineimap.py 

	#+begin_src python :tangle no

	#!/usr/bin/python
	import re, os

	def get_password_emacs():
			return os.popen("gpg -q --no-tty -d ~/.gmailpass.gpg").read()

	#+END_SRC

4. Create ~/.authinfo with the gmail password and  encrypt with:   
	#+begin_src :tangle no
		M-x epa-encrypt-file (remember to remove original)
	#+END_SRC

5. Index the messages: 
	#+begin_src :tangle no
	mu index --maildir=~/Documents/Maildir
	#+END_SRC

#+begin_src emacs-lisp :tangle yes

(if (and (file-exists-p "~/.offlineimaprc") (file-exists-p "~/Documents/Maildir"))
	(use-package mu4e

	:config
		;; default
		(setq mu4e-maildir (expand-file-name "~/Documents/Maildir"))

		(setq mu4e-drafts-folder "/[Gmail].Drafts")
		(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
		(setq mu4e-trash-folder  "/[Gmail].Trash")

		;; don't save message to Sent Messages, GMail/IMAP will take care of this
		(setq mu4e-sent-messages-behavior 'delete)

		;; setup some handy shortcuts
		(setq mu4e-maildir-shortcuts
					'(("/INBOX"             . ?i)
						("/[Gmail].Sent Mail" . ?s)
						("/[Gmail].Trash"     . ?t)))

		;; allow for updating mail using 'U' in the main view:
		(setq mu4e-get-mail-command "offlineimap")

		;; Personal info
		(setq
		 user-mail-address "gabriel.gabrielhs@gmail.com"
		 user-full-name  "Gabriel Henriques siqueira"
		 ;; message-signature ""
		)

		;; sending mail -- replace USERNAME with your gmail username
		;; also, make sure the gnutls command line utils are installed
		;; package 'gnutls-bin' in Debian/Ubuntu, 'gnutls' in Archlinux.

		(use-package smtpmail
			:config
			(setq message-send-mail-function 'smtpmail-send-it
						smtpmail-stream-type 'starttls
						smtpmail-default-smtp-server "smtp.gmail.com"
						smtpmail-smtp-server "smtp.gmail.com"
						smtpmail-smtp-service 587)
		)
	) nil )
#+END_SRC

*** Multiple cursors
	Create new cursors on the buffer.
	
	[[Multiple cursors key]]

#+begin_src emacs-lisp :tangle yes

  (use-package multiple-cursors
     :ensure t)

#+END_SRC
	
*** Relative line numbers
	Change line numbers in order to make them relative to the current line.

	[[Relative line numbers key]]

#+begin_src emacs-lisp :tangle yes

  (use-package linum-relative
     :ensure t
		 :config
				(linum-relative-on)
				(global-linum-mode))

#+END_SRC

*** Undo-tree
  Undo behave like a tree.		
#+begin_src emacs-lisp :tangle yes

  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-visualizer-diff t)

#+END_SRC

*** Emacs-w3m
		Web browser

#+begin_src emacs-lisp :tangle no

  (use-package w3m :ensure t)

#+END_SRC

*** Which-key
  Show key bindings.	
#+begin_src emacs-lisp :tangle yes

  (use-package which-key
     :ensure t
		 :config
				(which-key-mode)
				(setq which-key-show-operator-state-maps t)
  )

#+END_SRC

*** Whitespace mode
	Marks all witespaces.

#+begin_src emacs-lisp :tangle no

  (global-whitespace-mode)
  ;; make whitespace-mode use just basic coloring
  (setq whitespace-style
    (quote (spaces tabs space-mark tab-mark)))

#+END_SRC

* Functions

** My-flyspell
	Easier way of change dictionary and enable flyspell.
	
	[[Flyspell key]]

#+begin_src emacs-lisp :tangle yes

  (defun my/change-dictionary ()
    " change dictionary."
		(interactive)
		(print
		 (if (string= ispell-dictionary "english")
				 (setq ispell-dictionary "pt_BR")
				 (if (string= ispell-dictionary "pt_BR")
						 (setq ispell-dictionary "de_DE")
						 (setq ispell-dictionary "english")))))
#+END_SRC

** Move line
	Move entire line up and down.

	[[Move line key]]

#+begin_src emacs-lisp :tangle yes

  (defun my/move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun my/move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (my/move-line (if (null n) -1 (- n))))

  (defun my/move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (my/move-line (if (null n) 1 n)))

#+END_SRC

** Esc quits
	Closer to vim were asc quits everything.

#+begin_src emacs-lisp :tangle yes

  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  ;; key bindings
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)

#+END_SRC
	
** Clipboard
	Functions for enable and disable system clipboard and send filename to 
clipboard.

	[[Clipboard key]]

#+begin_src emacs-lisp :tangle yes

  (defun my/toggle-clip ()
    "Enable or Disable system clipboard."
    (interactive)
        (if (not interprogram-cut-function)
            (and
             (setq interprogram-cut-function 'x-select-text)
             (setq interprogram-paste-function 'x-selection-value))
            (or
             (setq interprogram-cut-function nil)
             (setq interprogram-paste-function nil))
  ))

  (defun my/file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
        
#+END_SRC

* Key bindings
	
** Evil leader
	Set evil leader key

#+begin_src emacs-lisp :tangle yes

  (use-package evil-leader
     :ensure t
     :config
			(global-evil-leader-mode)
			(evil-leader/set-leader "ç"))

#+END_SRC

** Fi keys
	 [[Flycheck key]]
   [[Menu bar key]]
	 [[Neotree key]]


** <<Clipboard key>>

#+begin_src emacs-lisp :tangle yes

(evil-leader/set-key "c" 'my/toggle-clip)

#+END_SRC

** <<Evaluation key>>

#+begin_src emacs-lisp :tangle yes

  ;; prolog
  (add-hook 'prolog-mode-hook  (evil-leader/set-key "e" 'ediprolog-dwim)) 

#+END_SRC

** <<Evil-numbers key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "n+" 'evil-numbers/inc-at-pt)
  (evil-leader/set-key "n-" 'evil-numbers/dec-at-pt)

#+END_SRC

** <<Folding-mode key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "f" 'folding-toggle-show-hide) ; key bindin

#+END_SRC

** <<Go to key>>
	Ace Jump and other types of go to.

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "gb" 'switch-to-buffer)   ; change buffer
  (evil-leader/set-key "gw" 'ace-jump-word-mode) ; çw for Ace Jump (word)
  (evil-leader/set-key "gl" 'ace-jump-line-mode) ; çl for Ace Jump (line)
  (evil-leader/set-key "gc" 'ace-jump-char-mode) ; çc for Ace Jump (char)
  (evil-leader/set-key "gs" 'other-window)       ; go to another split
  ;;  go to previous heading (org) 
  (evil-leader/set-key "gp" 'outline-previous-visible-heading)
  ;; go to next heading (org)
  (evil-leader/set-key "gn" 'outline-next-visible-heading)
   
#+END_SRC

** <<Menu bar key>>
	 Hide/show menu bar.

#+begin_src emacs-lisp :tangle yes

  (global-set-key [f6] 'menu-bar-mode)

#+END_SRC

** <<Hippie-expand key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "/" 'my-complete-file-name)

#+END_SRC

** <<Minibuffers key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key ":e" 'eval-expression)
  (evil-leader/set-key ":s" 'smex-major-mode-commands)
  (evil-leader/set-key ":m" 'smex-major-mode-commands)
  (evil-leader/set-key ":h" 'helm-M-x)

#+END_SRC
	 
** <<Move line key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "<up>" 'my/move-line-up)
  (evil-leader/set-key "k" 'my/move-line-up)
  (evil-leader/set-key "<down>" 'my/move-line-down)
  (evil-leader/set-key "j" 'my/move-line-down)

#+END_SRC

** <<Multiple cursors key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "mm" 'mc/edit-lines)
  (evil-leader/set-key "m>" 'mc/mark-next-like-this)
  (evil-leader/set-key "m<" 'mc/mark-previous-like-this)
  (evil-leader/set-key "ma" 'mc/mark-all-like-this)

#+END_SRC

** <<Flycheck key>>

#+begin_src emacs-lisp :tangle yes

  (global-set-key [f7] 'flycheck-list-errors)

#+END_SRC

** <<Flyspell key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "ss" 'flyspell-mode)
  (evil-leader/set-key "sc" 'my/change-dictionary)

#+END_SRC

** <<Neotree key>>
	 
#+begin_src emacs-lisp :tangle yes

  (global-set-key [f5] 'neotree-toggle)

#+END_SRC

** <<Org latex key>>

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "C-l" 'org-preview-latex-fragment) 

#+END_SRC

** <<Paxedit key>>

#+begin_src emacs-lisp :tangle yes

  (eval-after-load "paxedit"
    '(progn (define-key paxedit-mode-map (kbd "M-<right>") 'paxedit-transpose-forward)
            (define-key paxedit-mode-map (kbd "M-<left>") 'paxedit-transpose-backward)
            (define-key paxedit-mode-map (kbd "M-<up>") 'paxedit-backward-up)
            (define-key paxedit-mode-map (kbd "M-<down>") 'paxedit-backward-end)
            (define-key paxedit-mode-map (kbd "M-b") 'paxedit-previous-symbol)
            (define-key paxedit-mode-map (kbd "M-f") 'paxedit-next-symbol)
            (define-key paxedit-mode-map (kbd "C-%") 'paxedit-copy)
            (define-key paxedit-mode-map (kbd "C-&") 'paxedit-kill)
            (define-key paxedit-mode-map (kbd "C-*") 'paxedit-delete)
            (define-key paxedit-mode-map (kbd "C-~") 'paxedit-sexp-raise)
            ;; Symbol backward/forward kill
            (define-key paxedit-mode-map (kbd "M-k M-b") 'paxedit-backward-kill)
            (define-key paxedit-mode-map (kbd "M-k M-f") 'paxedit-forward-kill)
            ;; Symbol manipulation
            (define-key paxedit-mode-map (kbd "M-u") 'paxedit-symbol-change-case)
            (define-key paxedit-mode-map (kbd "M-l") 'paxedit-symbol-copy)
            (define-key paxedit-mode-map (kbd "M-k M-k") 'paxedit-symbol-kill)))

#+END_SRC

** <<Relative line numbers key>>
	 
#+begin_src emacs-lisp :tangle yes

  ;; relative/absolute lines
  (evil-leader/set-key "l" 'linum-relative-toggle)

#+END_SRC
	 
** <<Terminal key>>

#+begin_src emacs-lisp :tangle yes

  (global-set-key [f8] 'multi-term-dedicated-toggle)
  (add-hook 'term-mode-hook
            (lambda ()
              (evil-leader/set-key "tl" 'term-line-mode)
              (evil-leader/set-key "tc" 'term-char-mode)))

#+END_SRC

** Count-words-region

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "=" 'count-words-region)

#+END_SRC

** Hide/show
#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "hs" 'hs-show-block) 
  (evil-leader/set-key "hS" 'hs-show-all) 
  (evil-leader/set-key "hh" 'hs-hide-block) 
  (evil-leader/set-key "hH" 'hs-hide-all) 

#+END_SRC

** Registers
Copy and paste inside a register.

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "\"y" 'copy-to-register)
  (evil-leader/set-key "\"p" 'insert-register)

#+END_SRC

** Visual line

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "w" 'visual-line-mode) 

#+END_SRC

** Zoom

#+begin_src emacs-lisp :tangle yes

  (evil-leader/set-key "+" 'text-scale-increase)
  (evil-leader/set-key "-" 'text-scale-decrease)

#+END_SRC

* Local file

#+begin_src emacs-lisp :tangle yes

  ;; read local file if exists
  (when (file-exists-p "~/.emacs.d/local.el")
    (load-file "~/.emacs.d/local.el"))

#+END_SRC
